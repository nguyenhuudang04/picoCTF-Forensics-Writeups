import struct

# Dữ liệu secret từ binary
secret = bytes([
    0xb8, 0xea, 0x8e, 0xba, 0x3a, 0x88, 0xae, 0x8e,
    0xe8, 0xaa, 0x28, 0xbb, 0xb8, 0xeb, 0x8b, 0xa8,
    0xee, 0x3a, 0x3b, 0xb8, 0xbb, 0xa3, 0xba, 0xe2,
    0xe8, 0xa8, 0xe2, 0xb8, 0xab, 0x8b, 0xb8, 0xea,
    0xe3, 0xae, 0xe3, 0xba, 0x80
])

# Dữ liệu matrix từ binary (little endian, mỗi giá trị 4 byte)
matrix_bytes = bytes([
    0x08,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x0c,0x00,0x00,0x00, 0x08,0x00,0x00,0x00,
    0x0e,0x00,0x00,0x00, 0x14,0x00,0x00,0x00, 0x0a,0x00,0x00,0x00, 0x22,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00, 0x2c,0x00,0x00,0x00, 0x0c,0x00,0x00,0x00, 0x30,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00, 0x3c,0x00,0x00,0x00, 0x0a,0x00,0x00,0x00, 0x48,0x00,0x00,0x00,
    0x06,0x00,0x00,0x00, 0x52,0x00,0x00,0x00, 0x10,0x00,0x00,0x00, 0x58,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00, 0x68,0x00,0x00,0x00, 0x0c,0x00,0x00,0x00, 0x74,0x00,0x00,0x00,
    0x0a,0x00,0x00,0x00, 0x80,0x00,0x00,0x00, 0x08,0x00,0x00,0x00, 0x8a,0x00,0x00,0x00,
    0x0e,0x00,0x00,0x00, 0x92,0x00,0x00,0x00, 0x0e,0x00,0x00,0x00, 0xa0,0x00,0x00,0x00,
    0x10,0x00,0x00,0x00, 0xae,0x00,0x00,0x00, 0x0a,0x00,0x00,0x00, 0xbe,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00, 0xc8,0x00,0x00,0x00, 0x06,0x00,0x00,0x00, 0xd0,0x00,0x00,0x00,
    0x0a,0x00,0x00,0x00, 0xd6,0x00,0x00,0x00, 0x0c,0x00,0x00,0x00, 0xe0,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00, 0xec,0x00,0x00,0x00, 0x0e,0x00,0x00,0x00, 0xf8,0x00,0x00,0x00,
    0x10,0x00,0x00,0x00, 0x06,0x01,0x00,0x00, 0x0e,0x00,0x00,0x00, 0x16,0x01,0x00,0x00,
    0x04,0x00,0x00,0x00, 0x24,0x01,0x00,0x00
])
matrix = list(struct.unpack("<" + "I"*(len(matrix_bytes)//4), matrix_bytes))

def get_bit(secret, idx):
    if idx < 0:
        idx += 7
    byte = secret[idx >> 3]
    bit = (byte >> (7 - (idx % 8))) & 1
    return bit

def extract_bits(output_bytes):
    bits = []
    for b in output_bytes:
        for i in range(7, -1, -1):
            bits.append((b >> i) & 1)
    return bits

def reverse_flag(output_path, matrix, secret):
    with open(output_path, "rb") as f:
        output_bytes = f.read()
    bits = extract_bits(output_bytes)
    idx = 0
    flag = ""
    charset = [chr(i) for i in range(ord('a'), ord('z')+1)] + \
              [chr(i) for i in range(ord('A'), ord('Z')+1)] + [' ']
    while idx < len(bits):
        found = False
        for c in charset:
            c2 = c
            if 'A' <= c <= 'Z':
                c2 = chr(ord(c) + 0x20)
            if c2 == ' ':
                c2 = '{'
            mi = (ord(c2) - 0x61) * 2
            if mi < 0 or mi+1 >= len(matrix):
                continue
            bit_count = matrix[mi]
            bit_start = matrix[mi+1]
            candidate = [get_bit(secret, bit_start + i) for i in range(bit_count)]
            if bits[idx:idx+bit_count] == candidate:
                flag += c
                idx += bit_count
                found = True
                break
        if not found:
            break
    print("Flag:", flag)

if __name__ == "__main__":
    reverse_flag("output", matrix, secret)
